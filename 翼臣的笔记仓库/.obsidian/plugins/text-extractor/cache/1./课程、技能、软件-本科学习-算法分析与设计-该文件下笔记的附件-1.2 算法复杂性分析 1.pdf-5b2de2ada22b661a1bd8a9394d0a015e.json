{"path":".obsidian/plugins/text-extractor/cache/1./课程、技能、软件-本科学习-算法分析与设计-该文件下笔记的附件-1.2 算法复杂性分析 1.pdf-5b2de2ada22b661a1bd8a9394d0a015e.json","text":"1 二、算法复杂性分析 • 算法复杂性 是算法运行所需要的计算机资源的量，需要 时间资源的量称为 时间复杂性 ，需要的空间资源的量称 为 空间复杂性 。 • 算法复杂性应该只依赖于算法要解的 问题的规模 、 算法 的输入 和 算法本身的函数 。 • 如果分别用N 、I 和A 表示算法要解问题的规模、算法的 输入和算法本身，而且用 C 表示复杂性，那么，应该有 C= F( N , I , A ) 。 1 、复杂性的计量 复杂性的计量 2 • 一般把时间复杂性和空间复杂性分开，并分别用 T 和S 来 表示，则有： T= T( N , I ) 和S= S( N , I ) 。（通常，让 A 隐 含在复杂性函数名当中） å × = k 1 I)(N,et i ii 设一台 抽象计算机 提供的 元运算 有 k 种 , 分别记作 O 1 ,…,O k , 设这些元运算每执行一次所需时间分别为 t 1 , t 2 ,…,t k , 设算法 A 中 用到 O i 的次数为 e i , i = 1,…, k , 则 e i = e i ( N ,I ) T=T( N , I ) = 精确，但不具可操作性。 复杂性的计量 3 关于算法执行时间 : 一个算法的执行时间大致上等于其所有语句执行时间的 总和 ， 对于 语句的执行时间 是指该条语句的执行次数和执行 一次所需时间的乘积 。 原操作 是指从算法中选取一种对所研究问题是基本运算 的操作， 用随着问题规模增加的函数来表征 , 以此作为时间 量度。 语句频度 : 语句频度是指该语句在一个算法中重复执行的次数。 算法 时间复杂度 4 （ 1 ） 最坏情况 下的时间复杂性 T ma x ( n ) = m a x { T ( I ) | s i ze ( I ) = n } （ 2 ） 最好情况 下的时间复杂性 T mi n ( n ) = m i n { T ( I ) | s i ze ( I ) = n } （ 3 ） 平均情况 下的时间复杂性 T avg ( n ) = 其中 I 是问题的规模为 n 的实例， p (I ) 是实 例 I 出现的概 率。 å = nIsize ITIp )( )()( 最好，最坏和平均情形时间复杂度 5 算法 :Sequential Search 6 • 最优效率： T min ( n) = 1 • 最差效率 ： T ma x ( n) = n • 平均效率 )1(21)( pn n p n n p i n p n p nT avg -´+ ú û ù ê ë é ´+´++´+´=  [ ] )1(21 pnni n p -´+++++=  )1( 2 )1( )1( 1 )1( pn np pn nn n p -+ + =-´+ + ´= 7 非递归算法： （ 1 ） f or / w h i l e 循环 循环体内计算时间 * 循环次数； （ 2 ）嵌套循环 循环体内计算时间 * 所有循环次数； （ 3 ）顺序语句 各语句计算时间相加； （ 4 ） if - el s e 语句 if 语句计算时间和 el s e 语句计算时间的较大者。 8 分析算法中常用的求和公式 求和运算应用频繁的两个法则： åå == = u l i u l i acca ii 常用的求和公式： n ni = å ££1 1 ( ) 22 n 1i 2 1 2/)1(...21i nnnnn QÎ=+=+++= å = ( ) ååå === ±=± u l i u l i u l ii baa iii b 11 +-= å = lu u li , u ， l 分别是上下限整数，并且 l< = u 9 冒泡排序 （ bubbl e s or t ） 。冒泡排序是从左向右逐个检查， 对相邻的元素进行比较，若左边的元素比右边的元素大， 则交换这两个元素。这个行程称为一次冒泡，经一次冒泡 后，数组中最小的数被移动到最左的位置。最后将原数组 按递增的顺序排列。 冒泡排序算法分析 10 BU BBL E - SOR T ( A , n ) { fo r ( i = 1 ; i < = n ; i + + ) fo r ( j = n ; j > = i + 1 ; j -- ) if (a [ j ]< a [ j - 1] ) ex c h a n g e( a [ j ] , a [ j - 1] ) } 开销 c 1 c 1 c 2 c 3 次数 n+ 1 ( ) å = - n i in 1 ( ) å = +- n i in 1 1 t i 在进行算法分析时我们假定每行代码需要常量时间 , 第 i 行执行所花费的时间为 c i ，输入规模 n 为待排序数组的大小。 11 算法的运行时间 T( n) 为 当输入数组为升序时 , t i = 0, 出现最佳情况 , 运行时间为 : ( ) ( ) 1 21 2 21 2 3 2 )( cn cc n cc nT + - + + = 当输入数组为降序时 , t i =n ( n - 1) / 2 出现最坏情况 , 运行时间为 : ( ) ( ) 1 321 2 321 2 3 2 )( cn ccc n ccc nT + -- + ++ = 这时 T( n ) 也可以写成二次函数 an 2 +b n +c ，常量 a,b 和 c 与 c i 有关。 ( ) i n i n i tcincincncnT 3 1 2 1 11 ))1(()1()( +÷ ø ö ç è æ -++-++= åå == i tc nn c nn cnc 3211 2 )1( 2 )1( )1( + - + + ++= ( ) ( ) i tccn cc n cc 31 21 2 21 2 3 2 ++ - + + = 12 运行时间的数量级 • 可以对 T( n ) = a n 2 +b n +c 进一步简化。 • 常量 a,b 和 c 依赖于 c i ，我们可以忽略抽象语句开销 c i 。 • 进一步简化公式，当 n 很大时，相对于公式中的首项 an 2 ，低阶项可以忽略，最高项的系数也可以忽略。 • 这时用算法时间复杂度的数量级来表示 T( n ) , 当 T( n ) 为多项式时 , 可取其最高次的幂项 , 忽略最高项的系数 • 当问题的规模 n 趋向 无穷 大时，时间复杂度 T( n ) 的数 量级 ( 阶 ) 称为算法的 渐 进时间复杂度。 • 冒泡排序运行时间为 O ( n 2 ) 13 2 、时间复杂度 (time complexity) 对于算法分析，我们关 心 的是算法中语句总的执行次数 T( n ) 是关于问题规模 n 的函数，进而分析 T( n ) 随 n 的 变 化 情况 并 确 定 T( n ) 的 数量级 （ O r d e r of M agn i t u d e ）。在这 里 ， 我们用 “ O” 来表示数量级，这 样 我们可以 给出 算法的时间复杂度 概念 。 所 谓 算法的时间复杂度， 即 是算法的时间量度，记作： T( n ) = O ( f ( n ) ) 它 表示随问题规模 n 的增大，算法的执行时间的增 长 率和 f(n ) 的增 长 率相 同 ，称作算法的 渐 进时间复杂度，简称 时间复杂度 。 算法 时间复杂度 14 一般 情况下 ， 随 n 的增大， T( n ) 的增 长 较 慢 的算法为最优 的算法。 例 如： 在 下 列 三段 程序 段 中， 给出 原操作 x= x+ 1 的 时间复杂度分析。 （ 1 ） x= x+ 1 ； 其时间复杂度为 O ( 1) ， 我们称 之 为 常量阶 ； （ 2 ） f or （ i = 1; i < = n ; i + + ) x= x+ 1; 其时间复杂度为 O( n ) ， 我 们称 之 为 线 性阶 ； （ 3 ） f or ( i = 1; i < = n ; i + + ) f or ( j = 1; j < = n ; j + + ) x= x+ 1; 其时间复杂度为 O( ｎ 2 ) , 我们称 之 为 平 方 阶 。 此 外 算法 还能呈现 的时间复杂度有对数阶 O ( l og 2 n ) , 指数阶 O( 2 n ) 等。 15 算法分析中常见的复杂性函数 16 计算时间函数表 l ogn n nl ogn n 2 n 3 2 n 0 1 0 1 1 2 1 2 2 4 8 4 2 4 8 16 64 16 3 8 24 64 512 256 4 16 64 256 4096 65536 5 32 160 1024 32768 4294967296 17 T(n) 3000 2000 1000 5 10 15 20 n 200log 2 n 算法 A 100n 5n 2 2 n 3 2 n 算法 B 0 算法 B 多种数量级的时间复杂度图示 基本效率类型 : 18 • 在计算时间上把算法分为两 类 , 可用多项式来对其计算 时间 限界 的算法称为多项式时间算法 ; 而计算时间用指 数函数 限界 的算法称为指数时间算法 . • 以 下六 种多项式时间算法最为常 见 , 其关系为 : O ( 1) < O ( l ogn) < O ( n) < O ( nl ogn) < O ( n 2 )< O (n 3 ) • 指数时间算法一般有 O( 2 n ) 、 O ( n! ) 和 O( n n ) 。 其关系为： O( 2 n ) < O ( n! ) < O ( n n ) 19 解决大规模问题所需的时间 每秒 操作数 问题规模为 100 万 问题规模为 10 亿 n nl ogn n 2 n nl ogn n 2 10 6 几 秒 几秒 几周 几小 时 几小 时 几乎永 不结束 10 9 瞬 间 瞬间 几小 时 几秒 几秒 几十年 10 12 瞬 间 瞬间 几秒 瞬间 瞬间 几周","libVersion":"0.0.0","langs":"","hash":"","size":0}